
// === FotoMentor.Dev - Script JS Avan√ßado (corrigido) ===

// Defini√ß√£o das constantes globais para nome do app e vers√£o
const APP_NAME = "FotoMentor.Dev";
const VERSION = "1.0.0";

// Objeto para armazenar o estado da aplica√ß√£o, incluindo hist√≥rico, tema e tipos v√°lidos
const estado = {
  historico: [], // array para guardar textos gerados e seus dados
  tema: "claro", // tema atual da interface (claro ou escuro)
  tiposValidos: [ // tipos de textos que podem ser gerados
    "motivacional",
    "linkedin",
    "github",
    "curriculo",
    "personalizado",
    "projeto",
    "post-instagram",
    "email-assinatura",
  ],
};

// Objeto para guardar refer√™ncias aos elementos DOM que ser√£o usados
const dom = {
  form: null,           // formul√°rio
  tipoInput: null,      // input/select tipo de texto
  nomeInput: null,      // input nome
  infoInput: null,      // input info adicional
  output: null,         // √°rea onde o texto gerado aparece
  copiarBtn: null,      // bot√£o copiar
  limparBtn: null,      // bot√£o limpar
  salvarBtn: null,      // bot√£o salvar
  historicoLista: null, // lista do hist√≥rico na interface
  contadorChars: null,  // contador de caracteres no info
  contadorWords: null,  // contador de palavras no info
  temaToggle: null,     // bot√£o para alternar tema claro/escuro
  mensagemErro: null,   // √°rea para mostrar mensagens de erro
};

// Evento para iniciar a aplica√ß√£o quando o DOM estiver carregado
document.addEventListener("DOMContentLoaded", init);

// Fun√ß√£o de inicializa√ß√£o: cacheia DOM, vincula eventos, carrega tema, atualiza contadores e loga in√≠cio
function init() {
  cacheDom();        // guarda as refer√™ncias aos elementos do DOM no objeto dom
  bindEventos();     // adiciona os event listeners aos elementos
  atualizarContadores(); // atualiza os contadores de caracteres e palavras com base no campo info
  carregarTema();    // define o tema inicial da p√°gina (claro ou escuro)
  logInfo(`App iniciado: ${APP_NAME} v${VERSION}`); // log no console
}

// Guarda refer√™ncias para facilitar acesso e manipula√ß√£o
function cacheDom() {
  dom.form = document.getElementById("textForm");
  dom.tipoInput = document.getElementById("tipo");
  dom.nomeInput = document.getElementById("nome");
  dom.infoInput = document.getElementById("info");
  dom.output = document.getElementById("textoGerado");
  dom.copiarBtn = document.getElementById("copiarTexto");
  dom.limparBtn = document.getElementById("limparTexto");
  dom.salvarBtn = document.getElementById("salvarTexto");
  dom.historicoLista = document.getElementById("historico");
  dom.contadorChars = document.getElementById("contadorChars");
  dom.contadorWords = document.getElementById("contadorWords");
  dom.temaToggle = document.getElementById("temaToggle");
  dom.mensagemErro = document.getElementById("mensagemErro");
}

// Associa os eventos aos elementos HTML para intera√ß√£o
function bindEventos() {
  if (dom.form) dom.form.addEventListener("submit", onFormSubmit);           // Ao enviar formul√°rio
  if (dom.copiarBtn) dom.copiarBtn.addEventListener("click", onCopiarTexto); // Clicar bot√£o copiar
  if (dom.limparBtn) dom.limparBtn.addEventListener("click", onLimparCampos);// Clicar limpar campos
  if (dom.salvarBtn) dom.salvarBtn.addEventListener("click", onSalvarTexto);// Clicar salvar texto
  if (dom.infoInput) dom.infoInput.addEventListener("input", atualizarContadores); // Atualizar contadores quando usu√°rio digitar info
  if (dom.temaToggle) dom.temaToggle.addEventListener("click", toggleTema); // Alternar tema claro/escuro
}

// Fun√ß√£o para limitar texto a um n√∫mero m√°ximo de caracteres sem cortar no meio da palavra
function limitarTexto(texto, limite) {
  if (!texto) return "";
  texto = texto.trim();
  if (texto.length <= limite) return texto;
  let cortado = texto.slice(0, limite);
  const ultimoEspaco = cortado.lastIndexOf(" ");
  if (ultimoEspaco > Math.floor(limite * 0.5)) { // tenta cortar no √∫ltimo espa√ßo v√°lido
    cortado = cortado.slice(0, ultimoEspaco);
  }
  return cortado.trim() + "‚Ä¶"; // adiciona retic√™ncias para indicar corte
}

// Fun√ß√£o que gera textos baseados no tipo e dados inseridos
function gerarTexto(tipo, nome, info) {
  // Objeto com arrays de templates de textos para cada tipo
  const templates = {
    motivacional: [
      `Nem sempre o caminho √© f√°cil, mas sigo firme. Me chamo ${nome} e cada linha de c√≥digo representa um passo de supera√ß√£o. ${info} Acreditar no processo, manter a consist√™ncia e aprender com cada erro s√£o atitudes que me guiam diariamente. O futuro se constr√≥i com dedica√ß√£o. Programar exige paci√™ncia, pr√°tica constante e paix√£o genu√≠na por resolver problemas reais. Nada substitui o esfor√ßo di√°rio para alcan√ßar um objetivo maior.`,
      `Ol√°, sou ${nome}. Venho construindo minha jornada com coragem e muita resili√™ncia. ${info} A tecnologia √© meu meio de transforma√ß√£o pessoal e profissional. Aprendo com os desafios, compartilho o que descubro e sigo determinado a evoluir mais a cada dia. Cada dia representa uma oportunidade de fazer melhor, evoluir minhas ideias e ampliar meus horizontes com determina√ß√£o e prop√≥sito claro.`,
    ],
    linkedin: [
      `Sou ${nome}, atuo na √°rea de tecnologia com foco em desenvolvimento web. ${info} Acredito no poder da colabora√ß√£o, no aprendizado cont√≠nuo e em transformar ideias em solu√ß√µes reais. Estou em constante evolu√ß√£o, buscando contribuir com projetos que gerem impacto e crescimento m√∫tuo. Busco sempre fazer parte de times que valorizam a troca de conhecimento, a criatividade e a inova√ß√£o na resolu√ß√£o de problemas reais.`,
      `${nome} aqui! Construo minha trajet√≥ria profissional com base em valores como √©tica, foco e paix√£o por tecnologia. ${info} No LinkedIn, compartilho conquistas, aprendizados e tamb√©m me conecto com pessoas que acreditam em inova√ß√£o e prop√≥sito. Acredito que o trabalho com prop√≥sito √© o que move os profissionais mais engajados. Sigo em busca de oportunidades que conectem prop√≥sito e a√ß√£o.`,
    ],
    github: [
      `üëã Me chamo ${nome}, sou apaixonado por desenvolvimento e por construir solu√ß√µes que resolvem problemas reais. ${info} Meu GitHub reflete essa caminhada ‚Äî projetos com prop√≥sito, c√≥digo limpo e foco em boas pr√°ticas. Sinta-se √† vontade para explorar, colaborar e trocar ideias! Cada reposit√≥rio √© um passo do meu aprendizado constante e um reflexo da minha evolu√ß√£o como desenvolvedor comprometido e curioso.`,
      `${nome} na √°rea! Este perfil re√∫ne experi√™ncias em desenvolvimento web com projetos feitos com HTML, CSS, JS e automa√ß√µes. ${info} Aqui busco aprender, testar, documentar e evoluir junto da comunidade. Cada push √© mais do que c√≥digo: √© uma hist√≥ria de aprendizado, supera√ß√£o e constru√ß√£o de algo que impacta positivamente o mundo digital.`,
    ],
    curriculo: [
      `${nome}\nResumo: Profissional dedicado √† √°rea de tecnologia, focado em desenvolvimento front-end com experi√™ncia pr√°tica em projetos pessoais e colaborativos. ${info} Possui habilidades s√≥lidas em HTML, CSS, JavaScript e est√° sempre aberto ao aprendizado e √† resolu√ß√£o de desafios reais. Facilidade em trabalhar em equipe, proatividade e foco em entregar resultados com qualidade e consist√™ncia t√©cnica.`,
      `Nome: ${nome}\nResumo: ${info} Em transi√ß√£o de carreira para tecnologia, trago comigo disciplina, criatividade e senso de responsabilidade. Busco aplicar meus conhecimentos em ambientes colaborativos e contribuir com solu√ß√µes eficientes. Estou sempre aprendendo novas ferramentas, praticando l√≥gica de programa√ß√£o e criando interfaces que agreguem valor e usabilidade.`,
    ],
    personalizado: [
      `Ol√° ${nome}, aqui vai um texto pensado com carinho: ${info} O conhecimento n√£o cresce sozinho ‚Äî ele floresce quando √© compartilhado. Continue plantando boas ideias, conectando pessoas e criando impacto atrav√©s da tecnologia. Voc√™ est√° no caminho certo. Cada novo desafio vencido fortalece sua jornada e comprova que o esfor√ßo di√°rio faz toda diferen√ßa na constru√ß√£o dos seus sonhos.`,
      `${nome}, seu foco e determina√ß√£o s√£o percept√≠veis. ${info} Este √© um lembrete de que cada etapa importa. Seja com pequenas a√ß√µes di√°rias ou grandes entregas, tudo faz parte da jornada. Siga em frente com coragem. Confie no seu processo, valorize suas conquistas e inspire outras pessoas com sua persist√™ncia e dedica√ß√£o di√°ria.`,
    ],
    projeto: [
      `${nome} desenvolveu este projeto com o objetivo de aplicar conceitos de front-end na pr√°tica. ${info} Utilizando HTML5, CSS3 e JavaScript, o projeto entrega uma interface funcional, adapt√°vel e com visual atraente, demonstrando dom√≠nio t√©cnico e aten√ß√£o √† experi√™ncia do usu√°rio. Foi pensado para resolver uma dor real e aplicar boas pr√°ticas de c√≥digo limpo, responsividade e usabilidade.`,
      `Este projeto foi idealizado por ${nome} para solucionar uma necessidade espec√≠fica do p√∫blico. ${info} Com estrutura clara e uso de tecnologias modernas, ele serve como vitrine de conhecimento t√©cnico e criatividade aplicada ao desenvolvimento. Al√©m disso, demonstra organiza√ß√£o, aten√ß√£o ao design e capacidade de transformar ideias em solu√ß√µes de impacto.`,
    ],
    "post-instagram": [
      `${nome} compartilha hoje: ${info} ‚ú® D√™ valor √†s suas conquistas, mesmo que pare√ßam pequenas. Cada esfor√ßo conta e cada passo te aproxima do seu objetivo. #foco #desenvolvimento #tecnologia. O caminho da evolu√ß√£o exige consist√™ncia, paci√™ncia e uma vontade real de se superar todos os dias.`,
      `üí° Dica do dia por ${nome}: ${info} As maiores mudan√ßas v√™m da consist√™ncia, n√£o da perfei√ß√£o. Continue testando, aprendendo e se adaptando. O crescimento vem com o tempo. #devlife #aprendizado. Cada falha traz uma li√ß√£o valiosa. Confie na sua jornada e siga em frente com determina√ß√£o.`,
    ],
  };

  // Normaliza o tipo para min√∫sculas para evitar erros
  const tipoNormalizado = tipo.toLowerCase();

  // Busca o array de templates para o tipo informado
  const lista = templates[tipoNormalizado];

  // Caso o tipo n√£o exista, retorna mensagem de erro
  if (!lista) {
    return `Tipo "${tipo}" n√£o reconhecido. Op√ß√µes v√°lidas: ${estado.tiposValidos.join(", ")}.`;
  }

  // Escolhe aleatoriamente uma frase do array para variedade
  const idx = Math.floor(Math.random() * lista.length);
  return lista[idx];
}

// Adiciona um registro ao hist√≥rico e atualiza a interface
function adicionarAoHistorico(tipo, nome, info, texto) {
  const registro = {
    id: Date.now(), // id √∫nico baseado no timestamp
    tipo,
    nome,
    info,
    texto,
  };

  estado.historico.push(registro); // adiciona ao array global
  renderizarHistorico();            // atualiza a lista na tela
}

// Atualiza visualmente a lista de hist√≥ricos na tela
function renderizarHistorico() {
  if (!dom.historicoLista) return;

  // Limpa a lista atual para re-renderizar
  dom.historicoLista.innerHTML = "";

  // Percorre o hist√≥rico do mais recente para o mais antigo
  estado.historico
    .slice()
    .reverse()
    .forEach((item) => {
      const li = document.createElement("li");
      li.className = "historico-item";

      // Adiciona tooltip com informa√ß√µes completas
      li.title = `Tipo: ${item.tipo}\nNome: ${item.nome}\nInfo: ${item.info}`;

      // Mostra apenas os primeiros 70 caracteres do texto com retic√™ncias
      li.textContent = item.texto.slice(0, 70) + "...";

      // Quando clicar, exibe o texto inteiro na √°rea de sa√≠da
      li.addEventListener("click", () => {
        if (dom.output) dom.output.textContent = item.texto;
      });

      // Insere o item na lista do DOM
      dom.historicoLista.appendChild(li);
    });
}

// Fun√ß√£o para copiar o texto gerado para a √°rea de transfer√™ncia
function onCopiarTexto() {
  const texto = dom.output?.textContent || "";

  if (!texto) {
    alert("Nenhum texto para copiar.");
    return;
  }

  // Usa API Clipboard para copiar texto
  navigator.clipboard.writeText(texto).then(() => {
    alert("Texto copiado para √°rea de transfer√™ncia!");
  });
}

// Limpa os campos do formul√°rio e o output
function onLimparCampos() {
  if (dom.nomeInput) dom.nomeInput.value = "";
  if (dom.infoInput) dom.infoInput.value = "";
  if (dom.tipoInput) dom.tipoInput.selectedIndex = 0;
  if (dom.output) dom.output.textContent = "";
  limparMensagemErro();
  atualizarContadores();
}

// Salva o texto gerado em arquivo .txt para download
function onSalvarTexto() {
  const texto = dom.output?.textContent || "";

  if (!texto) {
    alert("Nenhum texto para salvar.");
    return;
  }

  // Cria um Blob com o texto e for√ßa o download
  const blob = new Blob([texto], { type: "text/plain;charset=utf-8" });
  const link = document.createElement("a");
  link.download = `texto_gerado_${Date.now()}.txt`;
  link.href = URL.createObjectURL(blob);
  link.click();
}

// Atualiza os contadores de caracteres e palavras baseado no campo info
function atualizarContadores() {
  const texto = dom.infoInput?.value || "";
  const chars = texto.length;
  const words = texto.trim() === "" ? 0 : texto.trim().split(/\s+/).length;
  if (dom.contadorChars) dom.contadorChars.textContent = `Caracteres: ${chars}`;
  if (dom.contadorWords) dom.contadorWords.textContent = `Palavras: ${words}`;
}

// Alterna entre tema claro e escuro, atualizando atributo no HTML e estado interno
function toggleTema() {
  if (estado.tema === "claro") {
    document.documentElement.setAttribute("data-tema", "escuro");
    estado.tema = "escuro";
  } else {
    document.documentElement.setAttribute("data-tema", "claro");
    estado.tema = "claro";
  }
  logInfo(`Tema alterado para: ${estado.tema}`);
}

// Aplica o tema atual na inicializa√ß√£o
function carregarTema() {
  document.documentElement.setAttribute("data-tema", estado.tema);
}

// Valida os campos do formul√°rio, mostrando mensagens de erro e focando no campo inv√°lido
function validarCampos(tipo, nome, info) {
  if (!tipo) {
    mostrarMensagemErro("‚ùó Por favor, selecione o tipo de texto.");
    dom.tipoInput?.focus?.();
    return false;
  }
  if (!nome) {
    mostrarMensagemErro("‚ùó Por favor, preencha seu nome.");
    dom.nomeInput?.focus?.();
    return false;
  }
  if (!info) {
    mostrarMensagemErro("‚ùó Por favor, conte um pouco sobre voc√™.");
    dom.infoInput?.focus?.();
    return false;
  }
  if (!estado.tiposValidos.includes(tipo)) {
    mostrarMensagemErro("‚ùó Tipo de texto inv√°lido.");
    dom.tipoInput?.focus?.();
    return false;
  }
  return true;
}

// Exibe mensagem de erro na interface, ou alerta se o elemento n√£o existir
function mostrarMensagemErro(msg) {
  if (dom.mensagemErro) {
    dom.mensagemErro.textContent = msg;
    dom.mensagemErro.style.display = "block";
  } else {
    alert(msg);
  }
}

// Limpa a mensagem de erro
function limparMensagemErro() {
  if (dom.mensagemErro) {
    dom.mensagemErro.textContent = "";
    dom.mensagemErro.style.display = "none";
  }
}

// Logs para facilitar debug no console
function logInfo(msg, obj) {
  if (obj !== undefined) {
    console.log(`‚ÑπÔ∏è ${msg}`, obj);
  } else {
    console.log(`‚ÑπÔ∏è ${msg}`);
  }
}

function logErro(msg, obj) {
  if (obj !== undefined) {
    console.error(`‚ùå ${msg}`, obj);
  } else {
    console.error(`‚ùå ${msg}`);
  }
}

// Exporta o hist√≥rico inteiro para arquivo JSON para backup ou compartilhamento
function exportarHistorico() {
  if (estado.historico.length === 0) {
    alert("Nenhum texto no hist√≥rico para exportar.");
    return;
  }
  const jsonStr = JSON.stringify(estado.historico, null, 2);
  const blob = new Blob([jsonStr], { type: "application/json;charset=utf-8" });
  const link = document.createElement("a");
  link.download = `historico_textos_${Date.now()}.json`;
  link.href = URL.createObjectURL(blob);
  link.click();
}

// Fun√ß√£o extra que pode adicionar frases motivacionais ao texto gerado (n√£o usada diretamente)
function enriquecerTextoSimples(textoBase) {
  const frasesInspiradoras = [
    "Acredite no seu potencial e v√° al√©m!",
    "Cada passo √© um avan√ßo rumo ao sucesso.",
    "Persist√™ncia √© o caminho para a vit√≥ria.",
    "Aprender √© um processo cont√≠nuo e fascinante.",
    "O futuro pertence aos que se preparam hoje.",
    "Seja a mudan√ßa que voc√™ quer ver no mundo.",
  ];
  const aleatorio = frasesInspiradoras[Math.floor(Math.random() * frasesInspiradoras.length)];
  return textoBase + " " + aleatorio;
}

// C√≥digo para criar anima√ß√£o das bolhas na tela
const container = document.querySelector('.bubbles');
for (let i = 0; i < 900; i++) {
  const span = document.createElement('span');
  span.style.setProperty('--i', i);                         // posi√ß√£o horizontal (vari√°vel CSS)
  span.style.setProperty('--r', Math.floor(Math.random() * 10));  // varia√ß√£o escala/opacidade
  span.style.setProperty('--rx', Math.floor(Math.random() * 11)); // dire√ß√£o horizontal (-5 a +5)
  container.appendChild(span);
}

// Fun√ß√£o para enviar os dados ao webhook do n8n (integra√ß√£o backend)

// ‚úÖ Fun√ß√£o de envio ao n8n
async function enviarParaN8n(tipo, nome, info, texto) {
  const webhookUrl = "https://anderson-oliveira.app.n8n.cloud/webhook/gerador-texto";
  const payload = { 
    tipo, 
    nome, 
    info, 
    texto, 
    origem: APP_NAME, 
    timestamp: new Date().toISOString() 
  };

  try {
    const res = await fetch(webhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      throw new Error(`Erro HTTP ao enviar para n8n: ${res.status}`);
    }

    // Tenta extrair JSON da resposta
    let json;
    try {
      json = await res.json();
    } catch {
      json = null;
    }

    return json;

  } catch (err) {
    throw new Error(`Falha ao enviar para n8n: ${err.message}`);
  }
}

async function onFormSubmit(event) {
  event.preventDefault();
  limparMensagemErro();

  const tipo = dom.tipoInput?.value || "";
  const nome = dom.nomeInput?.value.trim() || "";
  const info = dom.infoInput?.value.trim() || "";

  if (!validarCampos(tipo, nome, info)) return;

  logInfo("üéØ Submit clicado", { tipo, nome, info });

  // Gera texto local (fallback)
  const textoGerado = gerarTexto(tipo, nome, info);
  dom.output.innerHTML = textoGerado.replace(/\n/g, "<br>");

  try {
    // Aguarda resposta do n8n
    const resposta = await enviarParaN8n(tipo, nome, info, textoGerado);

    console.log("üßê Resposta completa do n8n:", resposta);

    // Se resposta.output for string n√£o vazia, usa ela
    if (resposta?.output && typeof resposta.output === "string" && resposta.output.trim().length > 0) {
      const textoN8n = resposta.output;
      dom.output.innerHTML = textoN8n.replace(/\n/g, "<br>");
      logInfo("‚úÖ Texto do n8n exibido com sucesso!");
      adicionarAoHistorico(tipo, nome, info, textoN8n);
    } else {
      // Sen√£o, usa texto local
      logInfo("‚ö†Ô∏è Resposta do n8n sem texto. Usando texto local.");
      adicionarAoHistorico(tipo, nome, info, textoGerado);
    }

  } catch (erro) {
    // Em caso de erro, fallback local
    logErro("‚ùå Erro ao enviar para n8n. Usando fallback local.", erro);
    adicionarAoHistorico(tipo, nome, info, textoGerado);

    alert("‚ö†Ô∏è Falha no envio ao servidor, texto salvo localmente.");
  }

  atualizarContadores();
  logInfo("‚úÖ Fluxo finalizado!");
}
